package xiter

import "iter"

// Map applies a function to each element in the input sequence and returns a new sequence with the results.
func Map[In, Out any](seq iter.Seq[In], fun func(In) (Out, bool)) iter.Seq[Out] {
	return func(yield func(Out) bool) {
		for rec := range seq {
			v, ok := fun(rec)
			if ok {
				if !yield(v) {
					return
				}
			}
		}
	}
}

// Map2 applies a function to each element in the input sequence and returns a new sequence with the results.
func Map2[InKey, InVal, OutKey, OutVal any](seq iter.Seq2[InKey, InVal], fun func(InKey, InVal) (OutKey, OutVal, bool)) iter.Seq2[OutKey, OutVal] {
	return func(yield func(OutKey, OutVal) bool) {
		for rec, v := range seq {
			k, v, ok := fun(rec, v)
			if ok {
				if !yield(k, v) {
					return
				}
			}
		}
	}
}

// Map12 applies a function to each element in the input sequence and returns a new sequence with the results.
func Map12[In, K, V any](seq iter.Seq[In], fun func(In) (K, V, bool)) iter.Seq2[K, V] {
	return func(yield func(K, V) bool) {
		for rec := range seq {
			k, v, ok := fun(rec)
			if ok {
				if !yield(k, v) {
					return
				}
			}
		}
	}
}

// Map21 returns a function that applies 'fun' to each element in 'seq' and yields the results based on the provided 'yield' function.
func Map21[K, V, Out any](seq iter.Seq2[K, V], fun func(K, V) (Out, bool)) iter.Seq[Out] {
	return func(yield func(Out) bool) {
		for rec, v := range seq {
			out, ok := fun(rec, v)
			if ok {
				if !yield(out) {
					return
				}
			}
		}
	}
}

// MapKeys returns a function that applies 'fun' to each element in 'seq' and yields the results with keys generated by 'fun'.
func MapKeys[K, V any](seq iter.Seq[V], fun func(V) K) iter.Seq2[K, V] {
	return Map12(seq, func(v V) (K, V, bool) { return fun(v), v, true })
}

// MapValues applies the function 'fun' to each key in the input sequence 'seq' and returns a new sequence with the results where keys and values are flipped.
func MapValues[K, V any](seq iter.Seq[K], fun func(K) V) iter.Seq2[K, V] {
	return Flip(MapKeys(seq, fun))
}

// Flip takes a sequence 'seq' and returns a new sequence with keys and values flipped.
func Flip[K, V any](seq iter.Seq2[K, V]) iter.Seq2[V, K] {
	return Map2(seq, func(k K, v V) (V, K, bool) { return v, k, true })
}

// Keys takes a sequence 'seq' and returns a new sequence with only the keys from the input sequence.
func Keys[K, V any](seq iter.Seq2[K, V]) iter.Seq[K] {
	return Map21(seq, func(k K, _ V) (K, bool) { return k, true })
}

// Values takes a sequence 'seq' and returns a new sequence with only the values from the input sequence, discarding the keys.
func Values[K, V any](seq iter.Seq2[K, V]) iter.Seq[V] {
	return Map21(seq, func(_ K, v V) (V, bool) { return v, true })
}
